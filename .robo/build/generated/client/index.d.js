/**
 * Client
**/ import * as runtime from "./runtime/library.js";
const $Public = runtime.Types.Public;
const $Extensions = runtime.Types.Extensions;
/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */ export class PrismaClient {
}
(function(Prisma) {
    Prisma.DMMF = runtime.DMMF;
    /**
   * Validator
   */ Prisma.validator = runtime.Public.validator;
    /**
   * Prisma Errors
   */ Prisma.PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
    Prisma.PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
    Prisma.PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
    Prisma.PrismaClientInitializationError = runtime.PrismaClientInitializationError;
    Prisma.PrismaClientValidationError = runtime.PrismaClientValidationError;
    /**
   * Re-export of sql-template-tag
   */ Prisma.sql = runtime.sqltag;
    Prisma.empty = runtime.empty;
    Prisma.join = runtime.join;
    Prisma.raw = runtime.raw;
    Prisma.Sql = runtime.Sql;
    /**
   * Decimal.js
   */ Prisma.Decimal = runtime.Decimal;
    /**
  * Extensions
  */ Prisma.Extension = $Extensions.UserArgs;
    Prisma.getExtensionContext = runtime.Extensions.getExtensionContext;
    Prisma.Args = $Public.Args;
    Prisma.Payload = $Public.Payload;
    Prisma.Result = $Public.Result;
    Prisma.Exact = $Public.Exact;
    /**
   * Utility Types
   */ Prisma.JsonObject = runtime.JsonObject;
    Prisma.JsonArray = runtime.JsonArray;
    Prisma.JsonValue = runtime.JsonValue;
    Prisma.InputJsonObject = runtime.InputJsonObject;
    Prisma.InputJsonArray = runtime.InputJsonArray;
    Prisma.InputJsonValue = runtime.InputJsonValue;
    /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */ (function(NullTypes) {
        /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */ class DbNull {
        }
        /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */ class JsonNull {
        }
        /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */ class AnyNull {
        }
    })(NullTypes || (NullTypes = {}));
    var NullTypes;
})(Prisma || (Prisma = {}));
export var Prisma;

//# sourceMappingURL=data:application/json;base64,